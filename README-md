# Introduction

The goal of this assignment is to study and prove to build an IoT infrastructurev that is able to:
* Find the maximum sampling frequency of the esp32 board used 
* Generate a signal
* Sample the signal using the maximum frequency found and then adjust the sampling frequency through the help of the FFT
* Compute the average of the signal samples over a window
* Trasmit such results to an edge computer using wireless trasmission mediums 
* Measure a series of relevant metrics.

We will follow a step by step approach to show our work and our results.




# How to test

The board used for this project is an Heltec esp 32 wifi Lora v2 module, we use ArduinoIDE as IDE to compile and upload code to the board.
Follow these steps in order to test this project: 

* Install ArduinoIDE on you machine 
* Clone the github repository on your machine 
```
git clone https://github.com/Angelo-Pio/IoT_Individual_Assignment
```
* Import the *individual_assignment.ino* file in ArduinoIDE
* Connect your esp32 board, select the serial port and board type used 
* Compile and upload the code to the board, before this step make sure to correctly set up mosquitto server and the wifi connectivity

## Setting WiFi connectivity

In the first lines of code you will find two variables: ssid and password, set these variables in order to match the credentials of you smatphone.
This is required in order to use your smarphone as both the edge server and the WiFi source for the esp32 board.

## Setting the mosquitto server on an Android device

We will use our android smartphone to act as a edge server to which send messages through MQTT, the technology we will use is mosquitto, here we explain how to set up the Android device to run as a mosquitto server.

* Install termux on your Android device
* Open termux and run the following commands
   ```
    pgk update
    pkg install mosquitto
    nano .mosquitto.conf
    ```
* add in the mosquitto.conf file the following
    ```
    allow_anonymous true
    bind_address 0.0.0.0
    ```
    This will make mosquitto not require authentication from the clients and enable it to receive connections that are not locally generated but come from the wifi connection
* run **ifconfig** to get the ip address of the smartphone

# Setting up the environment

Our study requires a signal source to analyze, without it we cannot procede, so here we will show the technologies used and how the signal is locally generated.

In the Arduino scketch file _Individual_assignment.ino_ you can find a function named _generate_signal_, its purpose is to generate a signal wave of the type: __2\*sin(2\*pi*3\*t)+4\*sin(2\*pi*5\*t)__.
This signal will be used for our study and demonstration showed in the following sections.

# Finding the maximum sampling frequency


We want to find out which is the real maximum sampling frequency we can achieve using the ADC pin of our esp32 board, the sampling frequency is measured in Hz and it is about _how many samples we can take every second_. 
The function _find\_max\_freq()_ is then used to do so: 
the function is called in the _loop()_ so it is in a infinite loop where it reads a value from an analog pin enabled for ADC and increases a counter, after 1 second the counter is printed on the serial output and its value is reset to 0, giving us the number of samples taken in one seconds, hence the sampling frequency.

```
Sample Rate: 23663.00 Hz
```

We show above the result of this function, we found out that the maximum sampling frequency is 23.6 KHz, this value seems low, probably this is caused by the method we are using to calculate this value **TODO: more on this!!**.

**GIULIO DISCOVERY to add**
# Identify optimal sampling frequency

We now know the maximum sampling frequency our board can achieve over the ADC pin (23 KHz), we will use this value to oversample the signal we generated, then thanks to the FFT function we will find the maximum frequency of the signal and adapt the sampling frequency to the double of such value, this will optimize the sampling by saving precious resources (energy,time,computational power etc.).
We the initally the the variable old_samplingFrequency to 23600.



# Generating the Signal Samples
The process of generating signal samples is handled asynchronously within the `generate_signal_task`. This task simulates the creation of signal data by producing values and placing them into a queue. In this case, the task generates a simple signal pattern and sends each sample into the `samples_queue`. By using a dedicated task for signal generation, the system can continuously produce samples without blocking other operations, ensuring smooth real-time processing. The task communicates with the rest of the system through the queue, allowing for efficient data transfer between different processing steps.

# Sample the Signal Over a Sliding Window
To manage the incoming signal samples, the code employs a sliding window approach. The `sampling_signal_task` is responsible for receiving the generated signal samples from the `samples_queue`. As the signal samples arrive, they are stored in a circular buffer, and the task computes the average of the most recent samples to smooth out fluctuations. This task ensures that the system processes the data in manageable chunks and maintains an updated view of the signalâ€™s characteristics. The sliding window technique ensures that only the most recent data is considered, keeping the computation efficient and relevant. The processed average is then passed through a separate queue, `transmission_queue`, for further handling.

# Sending the Aggregated Value to the MQTT Broker
We will send the aggregate value to our smartphone running mosquitto. The explanation on how to set up the mosquitto server on a Android device can be found above in the section **How to test**.

Once the aggregated signal value (such as the average frequency) is computed by the `sampling_signal_task`, it is passed through the `transmission_queue` to the `avg_transmission_task`. This task is responsible for taking the averaged result and sending it to an MQTT broker via the `send_over_wifi_mqtt` function. By separating the transmission logic into a dedicated task, the system ensures that the data is transmitted without interference from the data processing pipeline. The use of queues guarantees that values are sent in the correct order and without loss, providing reliable communication to external systems or clients. The asynchronous nature of the tasks and the queues allows for non-blocking, continuous operation even under high data loads.


